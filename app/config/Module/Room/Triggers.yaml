--- # Do stuff when certain variables are changed

# TIME BASED

System.time:

  # STOP IGNORING MOTION

  Stop ignoring motion - ${Properties.selfObjectName}:
    if: this is ${Properties.motion.stop-ignoring-motion-at}
    set:
      ${Properties.selfObjectName}.ignoreMotion: 'false'

# PLEX

${Properties.plex.object}.status:

  # PLAYING

  If Plex is playing or resumed, stop cleaning - ${Properties.selfObjectName}:
    if:
      - this in ['playing','resumed']
      - ${Properties.plex.object}.mediaType in ['episode','movie']
      - ${Properties.roborock.object}.status in ['Cleaning','Zoned_cleaning']
      - ${Properties.roborock.object}.zone is none
    run:
      - ${Properties.roborock.object}.pause()
      - SystemNotify.send('Paused cleaning (${Properties.plex.object} playing)')

  If Plex is playing or resumed, turn lights OFF - ${Properties.selfObjectName}:
    if:
      - this in ['playing','resumed']
      - ${Properties.plex.object}.mediaType in ['episode','movie']
    run:
      - House.allLightsOff()
      - SystemNotify.send('All lights OFF (${Properties.plex.object} playing)')

  # PAUSED

  If Plex is paused - ${Properties.selfObjectName}:
    if:
      - this is paused
      - ${Properties.plex.object}.mediaType in ['episode','movie']
      - ${Properties.motion.object}.illuminance < ${Properties.light.on-by-motion-when-lux-below}
    run:
      - ${Properties.light.object}.on()
      - ${Properties.light.object}.temperature('${Properties.light.temperature}')
      - ${Properties.light.object}.brightness('${Properties.level.dim-duration-when-plex-paused}','${Properties.light.dim-duration-when-plex-paused}')
      - SystemNotify.send('${Properties.light.object} DIMMED (${Properties.plex.object} is ${Properties.plex.object}.status)')

  # STOPPED

  If Plex is stopped, resume cleaning - ${Properties.selfObjectName}:
    if:
      - this is stopped
      - ${Properties.plex.object}.mediaType in ['episode','movie']
      - ${Properties.roborock.object}.status is Paused
    run:
      - ${Properties.roborock.object}.resume()
      - SystemNotify.send('Resumed cleaning (${Properties.plex.object} is ${Properties.plex.object}.status)')

  If Plex is stopped - ${Properties.selfObjectName}:
    if:
      - this is stopped
      - ${Properties.plex.object}.mediaType in ['episode','movie']
      - ${Properties.motion.object}.illuminance < ${Properties.light.on-by-motion-when-lux-below}
    run:
      - ${Properties.light.object}.on()
      - ${Properties.light.object}.temperature('${Properties.light.temperature}')
      - ${Properties.light.object}.brightness('${Properties.light.brightness}','${Properties.light.on-duration-when-plex-stopped}')
      - SystemNotify.send('${Properties.light.object} ON (${Properties.plex.object} is ${Properties.plex.object}.status)')

# LIGHT

${Properties.light.object}.status:
  Stop ignoring motion - ${Properties.selfObjectName}:
    if: this is on
    set:
      ${Properties.selfObjectName}.ignoreMotion: 'false'

  Abnormal light ON while nobody home - ${Properties.selfObjectName}:
    if:
      - this is on
      - House.presence is false
    run:
      - ${Properties.light.object}.off()
      - SystemWarn.send('Detected light ON while nobody home! Turned it off. (${Properties.selfObjectName})')

  Reconnect - turn off secondary light - ${Properties.selfObjectName}:
    if:
      - this.status is 'on'
      - this.status.previousValue is 'offline'
      - ${Properties.light.secondary.object}.status is 'on'
    run:
      - ${Properties.selfObjectName}.secondaryLightOff()

  Reconnect - someone is present - ${Properties.selfObjectName}:
    if:
      - this.status is 'on'
      - this.status.previousValue is 'offline'
    set:
      House.presence: 'true'
      House.lastMotion: System.timestamp
      House.lastMotionLocation: '${Properties.name}'

${Properties.light.secondary.object}.status:
  Stop ignoring motion - ${Properties.selfObjectName}:
    if: this is on
    set:
      ${Properties.selfObjectName}.ignoreMotion: 'false'

  Reconnect - turn off primary light - ${Properties.selfObjectName}:
    if:
      - this.status is 'on'
      - this.status.previousValue is 'offline'
      - ${Properties.light.object}.status is 'on'
    run:
      - ${Properties.selfObjectName}.lightOff()

  Reconnect - someone is present - ${Properties.selfObjectName}:
    if:
      - this.status is 'on'
      - this.status.previousValue is 'offline'
    set:
      House.presence: 'true'
      House.lastMotion: System.timestamp
      House.lastMotionLocation: '${Properties.name}'

# ILLUMINANCE

${Properties.motion.object}.illuminance:
  Lights OFF (Sunny) - ${Properties.selfObjectName}:
    if:
      - this > ${Properties.light.off-when-lux-over}
      - Sun.state is day
      - ${Properties.light.object}.status is on
    run:
      - ${Properties.selfObjectName}.lightOff()
      - SystemNotify.send('${Properties.light.object} OFF (Sunny)')

  Secondary lights OFF (Sunny) - ${Properties.selfObjectName}:
    if:
      - this > ${Properties.light.secondary.off-when-lux-over}
      - Sun.state is day
      - ${Properties.light.secondary.object}.status is on
    run:
      - ${Properties.selfObjectName}.secondaryLightOff()
      - SystemNotify.send('${Properties.light.secondary.object} OFF (Sunny)')

# MOTION

${Properties.motion.object}.occupancy:
  Motion detected - ${Properties.selfObjectName}:
    if:
      - this is true
      - House.presence is true
      - ${Properties.selfObjectName}.ignoreMotion is not true
      - ${Properties.light.object}.status not in ['on','offline']
      - ${Properties.light.secondary.object}.status is not on
      - ${Properties.motion.object}.illuminance < ${Properties.light.on-by-motion-when-lux-below}
      - ${Properties.plex.object}.status not in ['playing','resumed']
    run:
      - ${Properties.selfObjectName}.lightOn()
      - SystemNotify.send('${Properties.light.object} ON (Motion detected)')

  Motion detected - no presence - ${Properties.selfObjectName}:
    if:
      - this is true
      - House.presence is false
      - ${Properties.motion.trigger-presence} is true
      - ${Properties.selfObjectName}.ignoreMotion is not true
      - ${Properties.light.object}.status not in ['on','offline']
      - ${Properties.light.secondary.object}.status is not on
      - ${Properties.motion.object}.illuminance < ${Properties.light.on-by-motion-when-lux-below}
      - ${Properties.plex.object}.status not in ['playing','resumed']
    run:
      - ${Properties.selfObjectName}.lightOn()
      - SystemWarn.send('Presence detected (${Properties.selfObjectName} motion)!')
      - SystemNotify.send('Presence detected (${Properties.selfObjectName} motion)!')
      - SystemNotify.send('${Properties.light.object} ON (Motion detected)')
    set:
      House.presence: 'true'

  Motion detected - Nobody home - ${Properties.selfObjectName}:
    if:
      - this is true
      - House.presence is false
    run:
      - SystemWarn.send('Motion detected but nobody is home (${Properties.selfObjectName})!')
      - SystemNotify.send('Motion detected but nobody is home (${Properties.selfObjectName})!')

${Properties.motion.object}.no_occupancy_since:
  Mark house motion - ${Properties.selfObjectName}:
    if:
      - this is 0
      - ${Properties.selfObjectName}.lastMotion is not System.timestamp
    set:
      House.lastMotion: System.timestamp
      House.lastMotionLocation: '${Properties.name}'
      ${Properties.selfObjectName}.lastMotion: System.timestamp

# TV

${Properties.tv.object}.status:
  Abnormal TV ON while nobody home - ${Properties.selfObjectName}:
    if:
      - this is on
      - House.presence is false
    run:
      - ${Properties.tv.object}.off()
      - SystemWarn.send('Detected TV ON while nobody home! Turned it off. (${Properties.selfObjectName})')

  Mark motion - ${Properties.selfObjectName}:
    if: ${Properties.selfObjectName}.lastMotion is not System.timestamp
    set:
      House.lastMotion: System.timestamp
      House.lastMotionLocation: '${Properties.name}'
      ${Properties.selfObjectName}.lastMotion: System.timestamp

  Audio system ON when TV ON - ${Properties.selfObjectName}:
    if:
      - this is on
      - ${Properties.selfObjectName}.ignoreMotion is not true
    run:
      - ${Properties.tv.audio-system.object}.on()
      - SystemNotify.send('${Properties.tv.audio-system.object} ON (${Properties.tv.object} ON)')

  Audio system OFF when TV OFF - ${Properties.selfObjectName}:
    if: this is off
    run:
      - ${Properties.tv.audio-system.object}.off()
      - SystemNotify.send('${Properties.tv.audio-system.object} OFF (${Properties.tv.object} OFF)')

  Mark Plex stopped when TV OFF - ${Properties.selfObjectName}:
    if:
      - this is off
      - ${Properties.plex.object}.status is not stopped
    run:
      - SystemNotify.send('Mark ${Properties.plex.object} stopped (${Properties.tv.object} OFF)')
    set:
      ${Properties.plex.object}.status: stopped

# BUTTON

${Properties.button.object}.click:
  Mark house presence - ${Properties.selfObjectName}:
    set:
      House.presence: 'true'

  Mark motion - ${Properties.selfObjectName}:
    if: ${Properties.selfObjectName}.lastMotion is not System.timestamp
    set:
      House.lastMotion: System.timestamp
      House.lastMotionLocation: '${Properties.name}'
      ${Properties.selfObjectName}.lastMotion: System.timestamp

  Single click - Local light OFF - ${Properties.selfObjectName}:
    if:
      - this is single
      - ${Properties.light.object}.status is on
    run:
      - ${Properties.selfObjectName}.lightOff()
      - SystemNotify.send('${Properties.light.object} OFF (${Properties.button.object})')

  Single click - Local light ON - ${Properties.selfObjectName}:
    if:
      - this is single
      - ${Properties.light.object}.status not in ['on','offline']
    run:
      - ${Properties.selfObjectName}.lightOn()
      - ${Properties.selfObjectName}.secondaryLightOff()
      - SystemNotify.send('${Properties.light.object} ON (${Properties.button.object})')

  Double click - Secondary light OFF - ${Properties.selfObjectName}:
    if:
      - this is double
      - ${Properties.light.secondary.object}.status is on
    run:
      - ${Properties.selfObjectName}.secondaryLightOff()
      - SystemNotify.send('${Properties.light.secondary.object} OFF (${Properties.button.object})')

  Double click - Secondary light ON - ${Properties.selfObjectName}:
    if:
      - this is double
      - ${Properties.light.secondary.object}.status not in ['on','offline']
    run:
      - ${Properties.selfObjectName}.secondaryLightOn()
      - ${Properties.selfObjectName}.lightOff()
      - SystemNotify.send('${Properties.light.secondary.object} ON (${Properties.button.object})')

  Triple click - Audio system OFF - ${Properties.selfObjectName}:
    if:
      - this is triple
      - ${Properties.tv.audio-system.object}.status is on
    run:
      - ${Properties.tv.audio-system.object}.off()
      - SystemNotify.send('${Properties.tv.audio-system.object} OFF (${Properties.button.object})')

  Triple click - Audio system ON - ${Properties.selfObjectName}:
    if:
      - this is triple
      - ${Properties.tv.audio-system.object}.status is not on
    run:
      - ${Properties.tv.audio-system.object}.on()
      - SystemNotify.send('${Properties.tv.audio-system.object} ON (${Properties.button.object})')

  Quadruple click - Pause cleaning - ${Properties.selfObjectName}:
    if:
      - this is quadruple
      - ${Properties.roborock.object}.status in ['Cleaning','Zoned_cleaning']
      - ${Properties.roborock.object}.zone in ['none','${Properties.name}']
    run:
      - ${Properties.roborock.object}.pause()
      - SystemNotify.send('Paused cleaning (${Properties.button.object})')

  Quadruple click - Resume cleaning - ${Properties.selfObjectName}:
    if:
      - this is quadruple
      - ${Properties.roborock.object}.status is Paused
      - ${Properties.roborock.object}.zone is none
    run:
      - ${Properties.roborock.object}.resume()
      - SystemNotify.send('Resumed cleaning (${Properties.button.object})')

  Quadruple click - Restart local cleaning - ${Properties.selfObjectName}:
    if:
      - this is quadruple
      - ${Properties.roborock.object}.status is Paused
      - ${Properties.roborock.object}.zone is ${Properties.name}
    run:
      - ${Properties.roborock.object}.cleanZone('${Properties.roborock.local-zone}','${Properties.name}')
      - SystemNotify.send('Clean ${Properties.selfObjectName} (${Properties.button.object})')

  Quadruple click - Start Local cleaning - ${Properties.selfObjectName}:
    if:
      - this is quadruple
      - ${Properties.roborock.object}.status is Charging
    run:
      - ${Properties.roborock.object}.cleanZone('${Properties.roborock.local-zone}','${Properties.name}')
      - SystemNotify.send('Clean ${Properties.selfObjectName} (${Properties.button.object})')

  Many click - Start House cleaning - ${Properties.selfObjectName}:
    if:
      - this is many
      - ${Properties.roborock.object}.status is Charging
    run:
      - ${Properties.roborock.object}.start()
      - SystemNotify.send('Clean house (${Properties.button.object})')

  Many click - Pause cleaning - ${Properties.selfObjectName}:
    if:
      - this is many
      - ${Properties.roborock.object}.status in ['Cleaning']
      - ${Properties.roborock.object}.zone in ['none']
    run:
      - ${Properties.roborock.object}.pause()
      - SystemNotify.send('Paused cleaning (${Properties.button.object})')

  Long click - Turn everything OFF - ${Properties.selfObjectName}:
    if: this is long
    run:
      - ${Properties.selfObjectName}.off()
      - House.off()
      - SystemNotify.send('Turn everything OFF (${Properties.button.object})')
    set:
      ${Properties.selfObjectName}.ignoreMotion: 'true'

# DOOR

${Properties.door.object}.contact:
  Mark motion - ${Properties.selfObjectName}:
    if: House.presence is false
    set:
      House.presence: 'true'
    run:
      - SystemWarn.send('Presence detected (${Properties.door.object})')
      - SystemNotify.send('Presence detected (${Properties.door.object})')

  Mark motion - ${Properties.selfObjectName}:
    if: ${Properties.selfObjectName}.lastMotion is not System.timestamp
    set:
      House.lastMotion: System.timestamp
      House.lastMotionLocation: '${Properties.name}'
      ${Properties.selfObjectName}.lastMotion: System.timestamp

  Mark door status - ${Properties.selfObjectName}:
    set:
      ${Properties.selfObjectName}.closedDoor: ${Properties.door.object}.contact
    run:
      - House.updateDoorsStatus()

  Stop cleaning on close - ${Properties.selfObjectName}:
    if:
      - this is true
      - ${Properties.roborock.object}.status in ['Cleaning','Zoned_cleaning']
      - ${Properties.roborock.object}.zone is ['none','${Properties.name}']
    run:
      - ${Properties.roborock.object}.pause()
      - SystemNotify.send('Paused cleaning (${Properties.door.object} closed)')

  Resume cleaning on open - ${Properties.selfObjectName}:
    if:
      - this is false
      - ${Properties.roborock.object}.status is Paused
      - ${Properties.roborock.object}.zone is none
    run:
      - ${Properties.roborock.object}.resume()
      - SystemNotify.send('Resumed cleaning (${Properties.door.object} opened)')

  Restart local cleaning on open - ${Properties.selfObjectName}:
    if:
      - this is false
      - ${Properties.roborock.object}.status is Paused
      - ${Properties.roborock.object}.zone is ${Properties.name}
    run:
      - ${Properties.roborock.object}.cleanZone('${Properties.roborock.local-zone}','${Properties.name}')
      - SystemNotify.send('Restart cleaning (${Properties.door.object} opened)')

${Properties.water-sensor.object}.water_leak:

  Leak Detected - Primary Light Flash - ${Properties.selfObjectName}:
    if: this is true
    run: ${Properties.selfObjectName}.lightWarn()

  Leak Detected - Secondary Light Flash - ${Properties.selfObjectName}:
    if: this is true
    run: ${Properties.selfObjectName}.secondaryLightWarn()

  Leak Detected - Send Message - ${Properties.selfObjectName}:
    if: this is true
    run: SystemWarn.send('WATER LEAK in ${Properties.selfObjectName}!')

  Leak Gone - ${Properties.selfObjectName}:
    if: this is false
    run:
      - ${Properties.selfObjectName}.lightUnwarn()
      - ${Properties.selfObjectName}.secondaryLightUnwarn()
      - SystemWarn.send('Water leak is gone in ${Properties.selfObjectName}')
