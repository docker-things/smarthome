---

jobs:

  # NO MOTION DETECTED - LAST MOTION IS LOCAL

  # Primary Light
  - interval: 5
    if:
      - ${Properties.light.object}.status is on
      - ${Properties.motion.object}.occupancy is false
      - House.lastMotionLocation is '${Properties.name}'
      - ${Properties.door.object}.contact is not true
      - ${Properties.motion.object}.occupancy.timeSince >= ${Properties.light.off-when-no-motion-for-X-seconds-prev-location}
    run:
      - ${Properties.selfObjectName}.lightOff()
      - SystemNotify.send('${Properties.light.object} OFF (No motion for ${Properties.light.off-when-no-motion-for-X-seconds-current-location} seconds - current location)')

  # Secondary Light
  - interval: 5
    if:
      - ${Properties.light.secondary.object}.status is on
      - ${Properties.motion.object}.occupancy is false
      - House.lastMotionLocation is '${Properties.name}'
      - ${Properties.door.object}.contact is not true
      - ${Properties.motion.object}.occupancy.timeSince >= ${Properties.light.secondary.off-when-no-motion-for-X-seconds-prev-location}
    run:
      - ${Properties.selfObjectName}.secondaryLightOff()
      - SystemNotify.send('${Properties.light.secondary.object} OFF (No motion for ${Properties.light.secondary.off-when-no-motion-for-X-seconds-current-location} seconds - current location)')

  # NO MOTION DETECTED - PREV MOTION IS LOCAL

  # Primary Light
  - interval: 4
    if:
      - ${Properties.light.object}.status is on
      - ${Properties.motion.object}.occupancy is false
      - House.lastMotionLocation.previousValue is '${Properties.name}'
      - ${Properties.door.object}.contact is not true
      - ${Properties.motion.object}.occupancy.timeSince >= ${Properties.light.off-when-no-motion-for-X-seconds-prev-location}
    run:
      - ${Properties.selfObjectName}.lightOff()
      - SystemNotify.send('${Properties.light.object} OFF (No motion for ${Properties.light.off-when-no-motion-for-X-seconds-prev-location} seconds - prev location)')

  # Secondary Light
  - interval: 4
    if:
      - ${Properties.light.secondary.object}.status is on
      - ${Properties.motion.object}.occupancy is false
      - House.lastMotionLocation.previousValue is '${Properties.name}'
      - ${Properties.door.object}.contact is not true
      - ${Properties.motion.object}.occupancy.timeSince >= ${Properties.light.secondary.off-when-no-motion-for-X-seconds-prev-location}
    run:
      - ${Properties.selfObjectName}.secondaryLightOff()
      - SystemNotify.send('${Properties.light.secondary.object} OFF (No motion for ${Properties.light.secondary.off-when-no-motion-for-X-seconds-prev-location} seconds - prev location)')

  # NO MOTION DETECTED - LAST & PREV MOTION IS NOT LOCAL

  # Primary Light
  - interval: 3
    if:
      - ${Properties.light.object}.status is on
      - ${Properties.motion.object}.occupancy is false
      - House.lastMotionLocation is not '${Properties.name}'
      - House.lastMotionLocation.previousValue is not '${Properties.name}'
      - ${Properties.door.object}.contact is not true
      - ${Properties.motion.object}.occupancy.timeSince >= ${Properties.light.off-when-no-motion-for-X-seconds-old-location}
    run:
      - ${Properties.selfObjectName}.lightOff()
      - SystemNotify.send('${Properties.light.object} OFF (No motion for ${Properties.light.off-when-no-motion-for-X-seconds-old-location} seconds - old location)')

  # Secondary Light
  - interval: 3
    if:
      - ${Properties.light.secondary.object}.status is on
      - ${Properties.motion.object}.occupancy is false
      - House.lastMotionLocation is not '${Properties.name}'
      - House.lastMotionLocation.previousValue is not '${Properties.name}'
      - ${Properties.door.object}.contact is not true
      - ${Properties.motion.object}.occupancy.timeSince >= ${Properties.light.secondary.off-when-no-motion-for-X-seconds-old-location}
    run:
      - ${Properties.selfObjectName}.secondaryLightOff()
      - SystemNotify.send('${Properties.light.secondary.object} OFF (No motion for ${Properties.light.secondary.off-when-no-motion-for-X-seconds-old-location} seconds - old location)')

  # STOP IGNORING MOVEMENT AFTER X SECONDS
  - interval: 5
    if:
      - ${Properties.selfObjectName}.ignoreMotion is true
      - ${Properties.selfObjectName}.ignoreMotion.timeSince >= ${Properties.motion.stop-ignoring-motion-after-X-seconds}
    set:
      ${Properties.selfObjectName}.ignoreMotion: 'false'
