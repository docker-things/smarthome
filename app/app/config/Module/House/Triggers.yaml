---

${Properties.door}.contact:
  Door is closed - send message - ${Properties.selfObjectName}:
    if: this is true
    run:
      - SystemWarn.send('${Properties.door} was closed!')
      - SystemNotify.send('${Properties.door} was closed!')
    set:
      House.shouldCheckPresence: 'true'

  Door is opened - someone arrived - ${Properties.selfObjectName}:
    if:
      - this is false
      - House.presence is false
    run:
      - ${Properties.entrance-room}.lightOn()
      - SystemWarn.send('Someone entered the house')
      - SystemNotify.send('Someone entered the house')

  Door is opened - send message - ${Properties.selfObjectName}:
    if: this is false
    run:
      - SystemWarn.send('${Properties.door} was opened!')
      - SystemNotify.send('${Properties.door} was opened!')
    set:
      House.presence: 'true'

House.openWindows:
  When opening windows without presence - ${Properties.selfObjectName}:
    if:
      - this is true
      - House.presence is false
    run:
      - SystemWarn.send('Someone opened windows but house is empty!')
      - SystemNotify.send('Someone opened windows but house is empty!')

House.closedDoors:
  Pause roborock when closed doors - ${Properties.selfObjectName}:
    if:
      - this is true
      - ${Properties.roborock.object}.status in ['Cleaning','Zoned_cleaning']
    run:
      - ${Properties.roborock.object}.pause()
      - SystemNotify.send('Paused cleaning (Door closed)')

  Resume roborock when opened doors - ${Properties.selfObjectName}:
    if:
      - this is false
      - ${Properties.roborock.object}.status in ['Paused','Idle']
      - ${Properties.roborock.object}.lidOpened is not true
      - ${Properties.roborock.object}.lidOpened.timeSince < 172800
    run:
      - ${Properties.roborock.object}.resume()
      - SystemNotify.send('Resumed cleaning (All doors opened)')

House.presence:
  When house is empty - ${Properties.selfObjectName}:
    if:
      - this is false
    run:
      - House.offWithoutVacuum()
      - SystemWarn.send('House is empty. Turned everything off.')
      - SystemNotify.send('House is empty. Turned everything off.')

  When house is empty with opened windows - ${Properties.selfObjectName}:
    if:
      - this is false
      - House.openWindows is true
    run:
      - SystemWarn.send('Windows are opened!')
      - SystemNotify.send('Windows are opened!')

  When house is populated - ${Properties.selfObjectName}:
    if:
      - this is true
    run:
      - SystemWarn.send('Presence detected!')
      - SystemNotify.send('Presence detected!')

House.lastActivity:
  Check if house is active - ${Properties.selfObjectName}:
    run:
      - House.updateActiveStatus()

House.active:
  If house inactive during night assume sleeping - ${Properties.selfObjectName}:
    if:
      - this is false
      - House.presence is true
      - House.sleeping is not true
      - Sun.state is night
      - ${Properties.plex.object}.statusDelayed not in ['playing','paused','resumed']
    run:
      - House.off()
    set:
      House.sleeping: 'true'

  Active - ${Properties.selfObjectName}:
    if: this is true
    run: SystemNotify.send('House active')

  Inactive - ${Properties.selfObjectName}:
    if: this is false
    run: SystemNotify.send('House inactive')

House.sleeping:
  Sleeping - ${Properties.selfObjectName}:
    if: this is true
    run: SystemNotify.send('House sleeping')

  Awake - ${Properties.selfObjectName}:
    if: this is false
    run: SystemNotify.send('House awake')

House.shouldCheckPresence:
  Should check - ${Properties.selfObjectName}:
    if: this is true
    run: SystemNotify.send('House should check presence')

  Shouldn't check - ${Properties.selfObjectName}:
    if: this is false
    run: SystemNotify.send('House should not check presence')

Sun.state:
  House inactivity during night - assume sleeping - ${Properties.selfObjectName}:
    if:
      - this is night
      - House.active is false
      - House.presence is true
      - House.sleeping is not true
      - ${Properties.plex.object}.statusDelayed not in ['playing','paused','resumed']
    run:
      - House.off()
    set:
      House.sleeping: 'true'
