---

cmd: bash ${Base.paths.modules}/airpurifier-miot/airpurifier-miot.sh ${Properties.ip} ${Properties.token}

functions:

  on():
    run: ${cmd} on
    set:
      status: 'on'

  off():
    run: ${cmd} off
    set:
      status: 'off'

  # Check if it should turn off

  checkOpenWindows():
    runIf:
      - House.openWindows is true
      - House.openWindows.timeSince >= 60
      - ${Properties.selfObjectName}.status is not off
    runFunctions:
      - ${Properties.selfObjectName}.off()
      - SystemNotify.send('${Properties.selfObjectName} OFF (Opened windows)')

  checkSleeping():
    runIf:
      - House.sleeping is true
      - House.sleeping.timeSince >= 60
      - ${Properties.selfObjectName}.status is not off
    runFunctions:
      - ${Properties.selfObjectName}.off()
      - SystemNotify.send('${Properties.selfObjectName} OFF (Sleeping)')

  checkEmptyHouse():
    runIf:
      - House.presence is false
      - House.presence.timeSince > 300
      - ${Properties.selfObjectName}.status is not off
    runFunctions:
      - ${Properties.selfObjectName}.off()
      - SystemNotify.send('${Properties.selfObjectName} OFF (Empty house for 10m)')

  checkIfShouldTurnOff():
    runFunctions:
      - ${Properties.selfObjectName}.checkOpenWindows()
      - ${Properties.selfObjectName}.checkSleeping()
      - ${Properties.selfObjectName}.checkEmptyHouse()

  # true/false
  set_buzzer(boolean):
    run: ${cmd} set_buzzer ${ARGS.boolean}
    set:
      buzzer: ${ARGS.boolean}

  # true/false
  set_child_lock(boolean):
    run: ${cmd} set_child_lock ${ARGS.boolean}
    set:
      child_lock: ${ARGS.boolean}

  # 1/2/3
  set_fan_level(number):
    run: ${cmd} set_fan_level ${ARGS.number}
    set:
      fan_level: ${ARGS.number}
      mode: fan

  # 0-14
  set_favorite_level(number):
    run: ${cmd} set_favorite_level ${ARGS.number}
    set:
      favorite_level: ${ARGS.number}

  # 300-2300 (steps of 10)
  set_favorite_rpm(number):
    run: ${cmd} set_favorite_rpm ${ARGS.number}
    set:
      motor_speed: ${ARGS.number}

  # true/false
  set_led(boolean):
    run: ${cmd} set_led ${ARGS.boolean}
    set:
      led: ${ARGS.boolean}

  # bright/dim/off
  set_led_brightness(mode):
    runIf:
      - ${Properties.selfObjectName}.led_brightness is not '${ARGS.mode}'
    run: ${cmd} set_led_brightness ${ARGS.mode}
    set:
      led_brightness: ${ARGS.mode}

  # auto/fan/favorite/silent
  set_mode(mode):
    runIf:
      - ${Properties.selfObjectName}.mode is not '${ARGS.mode}'
    run: ${cmd} set_mode ${ARGS.mode}
    set:
      mode: ${ARGS.mode}

  getStatus():
    run: ${cmd} status
    if: ${RESPONSE.power} in ['on','off']
    set:
      status: ${RESPONSE.power}
      aqi: ${RESPONSE.aqi}
      average_aqi: ${RESPONSE.average_aqi}
      humidity: ${RESPONSE.humidity}
      temperature: ${RESPONSE.temperature}
      fan_level: ${RESPONSE.fan_level}
      mode: ${RESPONSE.mode}
      led: ${RESPONSE.led}
      led_brightness: ${RESPONSE.led_brightness}
      buzzer: ${RESPONSE.buzzer}
      buzzer_vol: ${RESPONSE.buzzer_vol}
      child_lock: ${RESPONSE.child_lock}
      favorite_level: ${RESPONSE.favorite_level}
      filter_life_remaining: ${RESPONSE.filter_life_remaining}
      filter_hours_used: ${RESPONSE.filter_hours_used}
      use_time: ${RESPONSE.use_time}
      purify_volume: ${RESPONSE.purify_volume}
      motor_speed: ${RESPONSE.motor_speed}
      filter_rfid_product_id: ${RESPONSE.filter_rfid_product_id}
      filter_rfid_tag: ${RESPONSE.filter_rfid_tag}
      filter_type: ${RESPONSE.filter_type}
    elseSet 3rd time:
      status: 'offline'
